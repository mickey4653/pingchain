// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  contacts      Contact[]
  messages      Message[]
  streaks       Streak[]
  contracts     Contract[]
  statistics    UserStatistics?
  notificationSettings NotificationSettings?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  platform    Platform  @default(WHATSAPP)
  category    String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
  contracts   Contract[]
  streaks     Streak[]

  @@unique([userId, email])
  @@unique([userId, phone])
}

model Message {
  id          String    @id @default(cuid())
  content     String
  tone        String?
  platform    Platform
  status      Status    @default(SENT)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactId   String
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  aiGenerated Boolean   @default(false)
  context     Json?     // Stores conversation context
}

model Streak {
  id            String   @id @default(cuid())
  contactId     String
  contact       Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastInteraction DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([contactId])
}

model Contract {
  id          String    @id @default(cuid())
  frequency   Frequency
  timeOfDay   String?   // Store as "HH:mm" format
  daysOfWeek  Int[]     // Array of days (0-6, where 0 is Sunday)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactId   String
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, contactId])
}

model UserStatistics {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalContacts Int      @default(0)
  totalMessages Int      @default(0)
  activeStreaks Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model NotificationSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  email         Boolean  @default(true)
  push          Boolean  @default(true)
  reminders     Boolean  @default(true)
  checkIns      Boolean  @default(true)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Platform {
  WHATSAPP
  IMESSAGE
  SLACK
  DISCORD
  EMAIL
}

enum Status {
  DRAFT
  SENT
  DELIVERED
  READ
  FAILED
}

enum Frequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}
